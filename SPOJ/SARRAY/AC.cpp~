    #include <stdio.h>
    #include <string.h>
    #include <algorithm>
    using namespace std;

    const int K = 4;
    const int A[] = { 29, 31, 47, 51 };
    const int N = 2010;
    const int HASH_SIZE = N * N + 1;

    struct hash_elem {
      int e;
      unsigned key[K];
    };

    char s[N], a[N], b[N];
    unsigned ks[K][N], ka[K][N], kb[K][N];
    unsigned keys[K];
    int na, nb, ns;
    unsigned pw[K][N];
    hash_elem hash_elems[HASH_SIZE];
    unsigned key[K];

    int insert(unsigned *key) {
      unsigned t = 0;
      for (int i = 0; i < K; i++)
        t ^= key[i];
      t %= HASH_SIZE;
      unsigned k = 1;

      while (1) {
        hash_elem *e = &hash_elems[t];
        if (e->e) {
          int flag = 1;
          for (int i = 0; i < K; i++)
            if (key[i] != e->key[i]) flag = 0;
          if (flag) return 0;
        } else {
          e->e = 1;
          memcpy(e->key, key, K * sizeof(unsigned));
          return 1;
        }

        k = (k + 2) % HASH_SIZE;
        t = (t + k) % HASH_SIZE;
      }
    }

    void hash(char *s, unsigned (*key)[N]) {
      int n = strlen(s);
      for (int k = 0; k < K; k++) {
        key[k][n] = 0;
        for (int i = n - 1; i >= 0; i--)
          key[k][i] = key[k][i + 1] * A[k] + s[i];
      }
    }

    int check_start(int i) {
      for (int k = 0; k < K; k++)
        if (ks[k][i] - ks[k][i + na] * pw[k][na] != ka[k][0]) return 0;
      return 1;
    }

    int check_end(int i) {
      for (int k = 0; k < K; k++)
        if (ks[k][i] - ks[k][i + nb] * pw[k][nb] != kb[k][0]) return 0;
      return 1;
    }

    int main() {
      for (int k = 0; k < K; k++) {
        pw[k][0] = 1;
        for (int i = 1; i < N; i++)
          pw[k][i] = pw[k][i - 1] * A[k];
      }

      scanf("%s %s %s", s, a, b);
      hash(s, ks);
      hash(a, ka);
      hash(b, kb);
      ns = strlen(s);
      na = strlen(a);
      nb = strlen(b);

      int ans = 0;
      for (int i = 0; i + na <= ns; i++) if (check_start(i)) {
        for (int j = max(i, i + na - nb); j + nb <= ns; j++) if (check_end(j)) {
    //    printf("%d %d\n", i, j);
          int t = j + nb;
          for (int k = 0; k < K; k++)
            key[k] = ks[k][i] - ks[k][t] * pw[k][t - i];
          ans += insert(key);
        }
      }
      printf("%d\n", ans);
      return 0;
    }
