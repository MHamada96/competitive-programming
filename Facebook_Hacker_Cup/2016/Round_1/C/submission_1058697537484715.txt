#include<bits/stdc++.h>
using namespace std;
int n;
int w[16][16];
int best[20], worst[20];
int id;
int mem[1 << 16];
int vis[1 << 16];
vector<int> masks[20];
void makeAns(int ind, int val) {
	best[ind] = min(best[ind], val);
	worst[ind] = max(worst[ind], val);
}

int getRank(int round) {
	if (round == 0)
		return 2;
	if (round == 1)
		return 3;
	if (round == 2)
		return 5;
	if (round == 3)
		return 9;
	assert(0);
	return 17;
}

int getWinners(vector<int> &competitors, int round) {

	int mask = 0;
	for (int i = 0; i < int(competitors.size()); i++)
		mask |= 1 << competitors[i];
	if (vis[mask] == id)
		return mem[mask];
	vis[mask] = id;

	if (competitors.size() == 1) {
		int ret = 1 << competitors[0];
		if (round == 0)
			makeAns(competitors[0], 1);
		return mem[mask] = ret;
	} else {
		int ret = 0;
		vector<int> v1, v2;
		for (int x = 0; x < int(masks[competitors.size()].size()); x++) {
			int msk = masks[competitors.size()][x];
			v1.clear();
			v2.clear();
			for (int i = 0; i < int(competitors.size()); i++)
				if (msk & (1 << i))
					v1.push_back(competitors[i]);
				else
					v2.push_back(competitors[i]);
			int ret1 = getWinners(v1, round + 1), ret2 = getWinners(v2,
					round + 1);

			for (int i = 0; i < int(v1.size()); i++)
				if (ret1 & (1 << v1[i]))
					for (int j = 0; j < int(v2.size()); j++)
						if (ret2 & (1 << v2[j])) {
							makeAns(w[v1[i]][v2[j]] ? v2[j] : v1[i],
									getRank(round));
							if (round == 0)
								makeAns(w[v1[i]][v2[j]] ? v1[i] : v2[j], 1);
							ret |= w[v1[i]][v2[j]] ?
									(1 << v1[i]) : (1 << v2[j]);
						}
		}
		return mem[mask] = ret;
	}
}

int main() {
	ios::sync_with_stdio(false);
	freopen("/home/ahmed/HackerCup/Task D/boomerang_tournament.txt", "r", stdin);
	freopen("/home/ahmed/HackerCup/Task D/boomerang_tournament_output.txt", "w", stdout);

	for (int sz = 1; sz <= 16; sz++)
		for (int msk = 0; msk < (1 << sz); msk++)
			if (__builtin_popcount(msk) == sz / 2)
				masks[sz].push_back(msk);

	int t; scanf("%d", &t);
	while (t--) {
		cerr << t << endl;
		scanf("%d", &n);
		memset(vis, 0, sizeof(vis));
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				scanf("%d", &w[i][j]);

		vector<int> v;
		for (int i = 0; i < n; i++)
			best[i] = 100, worst[i] = 0, v.push_back(i);
		printf("Case #%d: \n", ++id);
		getWinners(v, 0);
		for (int i = 0; i < n; i++)
			printf("%d %d\n", best[i], worst[i]);
	}
	return 0;
}

