#include <bits/stdc++.h>
#define loop(i,n) for(int i = 0;i < (n);i++)
#define range(i,a,b) for(int i = (a);i <= (b);i++)
#define all(A) A.begin(),A.end()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define sz(A) ((int)A.size())
#define vi vector<int>
#define vl vector<long long>
#define vd vector<double>
#define vp vector<pair<int,int> >
#define ll long long
#define pi pair<int,int>
#define point pair<double,double>
#define pl pair<ll,ll>
#define popcnt(x) __builtin_popcount(x)
#define LSOne(x) ((x) & (-(x)))
#define xx first
#define yy second
#define PQ priority_queue
#define print(A,t) cerr << #A << ": "; copy(all(A),ostream_iterator<t>(cerr," " )); cerr << endl
#define prp(p) cerr << "(" << (p).first << " ," << (p).second << ")";
#define prArr(A,n,t)  cerr << #A << ": "; copy(A,A + n,ostream_iterator<t>(cerr," " )); cerr << endl
#define PRESTDIO() cin.tie(0),cerr.tie(0),ios_base::sync_with_stdio(0)
using namespace std;

struct node{
	node *l,*r;
	ll inv[2];
	ll tot[2];
	int lazy;
};

int A[1 << 20],n;

vi merge(vi L,vi R,ll & inv){
	reverse(all(L));
	reverse(all(R));
	vi ret;
	while(!L.empty() && !R.empty()){
		if(L.back() <= R.back()) {
			ret.pb(L.back());
			L.pop_back();
		}
		else{
			ret.pb(R.back());
			R.pop_back();
			inv += sz(L);
		}
	}
	for(;!L.empty();L.pop_back()) ret.pb(L.back());
	for(;!R.empty();R.pop_back()) ret.pb(R.back());
	return ret;
}

void SET(node *root,int c = 0){
	root->tot[0] = root->inv[0];
	root->tot[1] = root->inv[1];
	if(root->l){
	 	root->tot[0] += root->l->tot[0^c] + root->r->tot[0^c];
	 	root->tot[1] += root->l->tot[1^c] + root->r->tot[1^c];
	}
}

node *build(int l,int m,vi & V){
	node *root = new node();
	if(!m) {
		V.pb(A[l]);	
		return root;
	}
	vi L,R;
	root->l = build(l,m - 1,L);
	root->r = build(l + (1 << (m - 1)),m - 1,R);
	V = merge(L,R,root->inv[0]);
	reverse(all(L));
	reverse(all(R));	
	merge(R,L,root->inv[0]);
	SET(root);
	return root;
}

void update(node *root){
	swap(root->l,root->r);
	swap(root->inv[0],root->inv[1]);
	root->lazy ^= 1;
	SET(root,root->lazy);
}

void push(node *root){
	update(root->l);
	update(root->r);
	root->lazy = 0;
}

void update(node *root,int d){
	if(!d) return update(root);
	if(root->lazy) push(root);	
	update(root->l,d - 1);
	update(root->r,d - 1);
	SET(root);
}

int main(){
	scanf("%d",&n);
	loop(i,1 << n) scanf("%d",A + i);
	vi V;
	auto root = build(0,n,V);
	int m,a;
	scanf("%d",&m);
	loop(i,m){
		scanf("%d",&a);
		update(root,n - a);
		printf("%lld\n",root->tot_inv[0]);
	}
	
	return 0;
}
